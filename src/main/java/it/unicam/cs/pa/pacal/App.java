/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.pacal;

import javafx.application.Application;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.*;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.logging.Logger;

/**
 *
 */
public class App<T extends CalcState> {

    private static Logger logger = Logger.getLogger("it.unicam.cs.pa.pacal.App");
    private final View<T> view;

    public enum CALCULATOR_TYPE {
        BASIC, SIMPLE, EXTENDED, STACK, SCIENTIFIC
    }

    private final Calculator<T> calculator;

    public App( View<T> view, Calculator<T> calculator ) {
        this.calculator = calculator;
        this.view = view;
        logger.info("Application Created.");
    }

    public static void main(String[] args) throws IOException {
        if (args.length == 0) {
            launchGui();
        } else {
            try {
                Objects.requireNonNull(createCalculator(args[0])).start();
            } catch (IllegalArgumentException e) {
                System.err.println("Calculator "+args[0]+" is unknown!");
            }
        }
    }

    private static void launchGui() {
        Application.launch(JavaFXPaCal.class);
    }

    public static App<?> createCalculator(String code) {
        switch (CALCULATOR_TYPE.valueOf(code.toUpperCase())) {
            case BASIC:
                return createBasicCalculator();
            case SIMPLE:
                return createSimpleCalculator();
            case EXTENDED:
                return createExtendedCalculator();
            case STACK:
                return createStackCalculator();
            case SCIENTIFIC:
                return createScientificCalculator();
        }
        return null;
    }

    public void start() throws IOException {
        logger.info("Application Started.");
        view.open(calculator);
        view.close();
        logger.info("Application Closed.");
    }

    public static <T extends CalcState> void addSimpleMathFunctions(HashMap<String,Consumer<? super T>> commands) {
        commands.put("+",createCommand(Double::sum));
        commands.put("-",createCommand((x,y) -> x-y));
        commands.put("/",createCommand((x,y) -> x/y));
        commands.put("*",createCommand((x,y) -> x*y));
    }

    public static <T extends CalcState> void addComplexMathFunctions(HashMap<String,Consumer<? super T>> commands) {
        commands.put("abs",createCommand(Math::abs));
        commands.put("pow",createCommand(Math::pow));
        commands.put("sqrt",createCommand(Math::sqrt));
        commands.put("log",createCommand(Math::log));
        commands.put("exp",createCommand(Math::exp));
    }


    public static <T extends CalcState> void addControllingCommands(HashMap<String,Consumer<? super T>> commands) {
        commands.put("exit", CalcState::turnOff);
        commands.put("delete", CalcState::delete);
        commands.put("clear",CalcState::reset);
    }

    public static App<?> createBasicCalculator() {
        HashMap<String,Consumer<? super BasicCalcState>> commands = new HashMap<>();
        addSimpleMathFunctions(commands);
        addControllingCommands(commands);
        BasicCalcState state = new BasicCalcState();
        MapBasedCalculator<BasicCalcState> calculator = new MapBasedCalculator<>(commands,state);
        return new App<>(new ConsoleView<>(new BasicCalcStatePrinter()),calculator);
    }

    public static App<?> createBasicCalculator(InputStream is, OutputStream os) {
        HashMap<String,Consumer<? super BasicCalcState>> commands = new HashMap<>();
        addSimpleMathFunctions(commands);
        addControllingCommands(commands);
        BasicCalcState state = new BasicCalcState();
        MapBasedCalculator<BasicCalcState> calculator = new MapBasedCalculator<>(commands,state);
        return new App<>(new ConsoleView<>(is,os,new BasicCalcStatePrinter()),calculator);
    }

    public static App<?> createSimpleCalculator() {
        HashMap<String,Consumer<? super SingleMemoryCalcState<BasicCalcState>>> commands = new HashMap<>();
        addSimpleMathFunctions(commands);
        addControllingCommands(commands);
        commands.put("store",SingleMemoryCalcState::store);
        commands.put("call",SingleMemoryCalcState::call);
        SingleMemoryCalcState<BasicCalcState> state = new SingleMemoryCalcState<>( new BasicCalcState() );
        MapBasedCalculator<SingleMemoryCalcState<BasicCalcState>> calculator = new MapBasedCalculator<>(commands,state);
        SingleMemoryCalcStatePrinter<BasicCalcState> printer = new SingleMemoryCalcStatePrinter<>(new BasicCalcStatePrinter());
        return new App<>(new ConsoleView<>(printer),calculator);
    }

    public static App<?> createExtendedCalculator() {
        HashMap<String,Consumer<? super DoubleMemoryCalcState<BasicCalcState>>> commands = new HashMap<>();
        addSimpleMathFunctions(commands);
        addControllingCommands(commands);
        addComplexMathFunctions(commands);
        commands.put("store1",DoubleMemoryCalcState::storeToMem1);
        commands.put("store2",DoubleMemoryCalcState::storeToMem2);
        commands.put("call1",DoubleMemoryCalcState::call1);
        commands.put("call2",DoubleMemoryCalcState::call2);
        DoubleMemoryCalcState<BasicCalcState> state = new DoubleMemoryCalcState<>( new BasicCalcState() );
        MapBasedCalculator<DoubleMemoryCalcState<BasicCalcState>> calculator = new MapBasedCalculator<>(commands,state);
        DoubleMemoryCalcStatePrinter<BasicCalcState> printer = new DoubleMemoryCalcStatePrinter<>(new BasicCalcStatePrinter());
        return new App<>(new ConsoleView<>(printer),calculator);
    }

    public static App<?> createStackCalculator() {
        HashMap<String,Consumer<? super StackMemoryCalcState<BasicCalcState>>> commands = new HashMap<>();
        addSimpleMathFunctions(commands);
        addControllingCommands(commands);
        addComplexMathFunctions(commands);
        commands.put("pop", StackMemoryCalcState::pop);
        commands.put("push", StackMemoryCalcState::push);
        StackMemoryCalcState<BasicCalcState> state = new StackMemoryCalcState<>( new BasicCalcState() );
        MapBasedCalculator<StackMemoryCalcState<BasicCalcState>> calculator = new MapBasedCalculator<>(commands,state);
        StackMemoryCalcStatePrinter<BasicCalcState> printer = new StackMemoryCalcStatePrinter<>(new BasicCalcStatePrinter());
        return new App<>(new ConsoleView<>(printer),calculator);
    }

    private static App<?> createScientificCalculator() {
        HashMap<String,Consumer<? super StackMemoryCalcState<StackCalcState>>> commands = new HashMap<>();
        addSimpleMathFunctions(commands);
        addControllingCommands(commands);
        addComplexMathFunctions(commands);
        commands.put("pop", StackMemoryCalcState::pop);
        commands.put("push", StackMemoryCalcState::push);
        StackMemoryCalcState<StackCalcState> state = new StackMemoryCalcState<>( new StackCalcState() );
        MapBasedCalculator<StackMemoryCalcState<StackCalcState>> calculator = new MapBasedCalculator<>(commands,state);
        StackMemoryCalcStatePrinter<StackCalcState> printer = new StackMemoryCalcStatePrinter<>(new StackCalcStatePrinter());
        return new App<>(new ConsoleView<>(printer),calculator);
    }



    public static Consumer<CalcState> createCommand(Function<Double,Double> f ) {
        return s -> s.setValue(f.apply(s.getValue1()));
    }

    public static Consumer<CalcState> createCommand(BiFunction<Double,Double,Double> f) {
        return s -> s.setValue(f.apply(s.getValue2(),s.getValue1()));
    }


}
